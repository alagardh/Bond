module Account where

import DA.Optional


template Account
  with
    holderLocateIn : Party
    accountHolder : Party
    balance : Int
    afterDistribute : Int

  where
    signatory holderLocateIn , accountHolder

    ensure balance >= 0
    
    key  (accountHolder,holderLocateIn) : (Party,Party)
    maintainer key._1


    nonconsuming choice TokenDistribute : Optional (ContractId Account)
      with
        transferTo : Party
        amount : Int
      controller holderLocateIn
        do
          assertMsg "transferTo and holder should not be same" (transferTo /= holderLocateIn)
          isExists <- lookupByKey @Account (transferTo,holderLocateIn)
          getholderData <- fetchByKey @Account (holderLocateIn,holderLocateIn)
          if(isSome isExists) then
            do
            assertMsg "transfer is asset is more than holdings" (getholderData._2.afterDistribute >= amount)
            contractDetails <- fetchByKey @Account (transferTo,holderLocateIn)
            archive contractDetails._1
            cid <- create Account 
              with
                accountHolder = contractDetails._2.accountHolder
                balance = contractDetails._2.balance + amount
                holderLocateIn = contractDetails._2.holderLocateIn
                afterDistribute = contractDetails._2.afterDistribute 
            archive getholderData._1
            create Account with
                accountHolder = getholderData._2.accountHolder
                balance = getholderData._2.balance
                holderLocateIn = getholderData._2.holderLocateIn
                afterDistribute = getholderData._2.afterDistribute - amount
            return $ Some cid
          else
            return None

    
  
    



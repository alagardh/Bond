module Main where

import Daml.Script
import DA.Optional (isNone)


template BondRequest
  with
    issuer : Party
    buyer: Party
    amountRequest: Decimal
  where
    signatory buyer, 
    observer issuer

    choice ApproveBondRequest : ContractId Account
      controller issuer
        do
          create Account with
              accountHolder = buyer
              balance = amountRequest
              holderLocateIn = None
          

template TokenRequest
  with
    transferFrom : Party
    transferTo : Party
    transferAmount : Decimal
  where
    signatory transferTo
    observer transferFrom

    choice AllowToMintTokens : ContractId Account
      controller transferFrom
      do
        currentAccountDetails <- fetchByKey @Account (transferFrom)
        assertMsg "request amount is greater than current holdings" (currentAccountDetails._2.balance >= transferAmount)
        isExists <- lookupByKey @Account transferTo 
        if(isNone isExists) then
            do
            create Account with
              accountHolder = transferTo
              balance = transferAmount
              holderLocateIn = None
          else
            do
              contractDetails <- fetchByKey @Account (transferTo)
              archive contractDetails._1
              create Account with
                accountHolder = transferTo
                balance = contractDetails._2.balance + transferAmount 
                holderLocateIn = None
        archive currentAccountDetails._1
        assertMsg "all bonds sold out" (currentAccountDetails._2.balance - transferAmount > 0.0)
        create Account with
                accountHolder = currentAccountDetails._2.accountHolder
                balance = currentAccountDetails._2.balance - transferAmount 
                holderLocateIn = None
    


  
template Account
  with
    accountHolder : Party
    balance : Decimal
    holderLocateIn : Optional Party
  where
    signatory accountHolder
    -- observer purchasedFrom
    key  accountHolder : Party
    maintainer key

    nonconsuming choice TokenDistribute : ContractId Account
      with
        transferTo : Party
        amount : Decimal
      controller holderLocateIn
        do
          contractDetails <- fetchByKey @Account accountHolder
          archive contractDetails._1
          create Account 
            with
              accountHolder = contractDetails._2.accountHolder
              balance = contractDetails._2.balance + amount
              holderLocateIn = contractDetails._2.holderLocateIn 

    
  
    


setup : Script ()
setup = script do
  bank <- allocatePartyWithHint "EuropeanBank" (PartyIdHint "EuropeanBank")
  gs <- allocatePartyWithHint "GSBank" (PartyIdHint "GSBank")
  bny <- allocatePartyWithHint "BNYMellon" (PartyIdHint "BNYMellon")
  bofa <- allocatePartyWithHint "BankBofa" (PartyIdHint "BankBofa")
  sant <- allocatePartyWithHint "BankSant" (PartyIdHint "BankSant")
  investA <- allocatePartyWithHint "InvestorA" (PartyIdHint "InvestorA")
  investB <- allocatePartyWithHint "InvestorB" (PartyIdHint "InvestorB")
  investC <- allocatePartyWithHint "InvestorC" (PartyIdHint "InvestorC")
    
  europeanBank <- validateUserId "EuropeanBank"
  gsbank <- validateUserId "GSBank"
  bnymellon <- validateUserId "BNYMellon"
  bankbofa <- validateUserId "BankBofa"
  banksant <- validateUserId "BankSant"
  investorA <- validateUserId "InvestorA"
  investorB <- validateUserId "InvestorB"
  investorC <- validateUserId "InvestorC"

  -- create user for seller and buyer
  createUser (User europeanBank (Some (bank))) [CanActAs (bank)]
  createUser (User gsbank (Some (gs))) [CanActAs (gs)]
  createUser (User bnymellon (Some (bny))) [CanActAs (bny)]
  createUser (User bankbofa (Some (bofa))) [CanActAs (bofa)]
  createUser (User banksant (Some (sant))) [CanActAs (sant)]
  createUser (User investorA (Some (investA))) [CanActAs (investA)]
  createUser (User investorB (Some (investB))) [CanActAs (investB)]
  createUser (User investorC (Some (investC))) [CanActAs (investC)]


  cid <- submit gs do
    createCmd BondRequest with
      issuer = bank
      buyer = gs
      amountRequest = 500.00

  submit bofa  do
    createCmd Account with
      accountHolder = bofa
      balance = 0.0
      holderLocateIn = Some bny



   



  return()
    
